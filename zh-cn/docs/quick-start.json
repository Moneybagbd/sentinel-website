{
  "filename": "quick-start.md",
  "__html": "<h1>快速开始</h1>\n<p>下面的例子将展示应用如何三步接入 Sentinel。同时，Sentinel 也提供一个所见即所得的控制台，可以实时监控资源以及管理规则。</p>\n<h2>在应用中引入 Sentinel</h2>\n<p><strong>注意:</strong> Sentinel 仅支持 Java 7 或者以上版本。</p>\n<p>如果应用使用 pom 工程，则在 <code>pom.xml</code> 文件中加入以下代码即可：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.csp<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>sentinel-core<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>x.y.z<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<p>如果您未使用依赖管理工具，请到 <a href=\"https://mvnrepository.com/artifact/com.alibaba.csp/sentinel-core\">Maven Center Repository</a> 直接下载 JAR 包。</p>\n<h2>定义资源</h2>\n<p>接下来，把需要控制流量的代码用 Sentinel API <code>SphU.entry(&quot;HelloWorld&quot;)</code> 和 <code>entry.exit()</code> 包围起来即可。在下面的例子中，我们将 <code>System.out.println(&quot;hello wolrd&quot;);</code> 作为资源，用 API 包围起来。参考代码如下:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n    initFlowRules();\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-keyword\">true</span>) {\n        Entry entry = <span class=\"hljs-keyword\">null</span>;\n        <span class=\"hljs-keyword\">try</span> {\n\t    entry = SphU.entry(<span class=\"hljs-string\">\"HelloWorld\"</span>);\n            System.out.println(<span class=\"hljs-string\">\"hello world\"</span>);\n\t} <span class=\"hljs-keyword\">catch</span> (BlockException e1) {\n\t    System.out.println(<span class=\"hljs-string\">\"block!\"</span>);\n\t} <span class=\"hljs-keyword\">finally</span> {\n\t   <span class=\"hljs-keyword\">if</span> (entry != <span class=\"hljs-keyword\">null</span>) {\n\t       entry.exit();\n\t   }\n\t}\n    }\n}\n</code></pre>\n<p>完成以上两步后，代码端的改造就完成了。当然，我们也提供了<a href=\"./annotation-support.md\">注解支持模块</a>，可以以低侵入性的方式定义资源。</p>\n<h2>定义规则</h2>\n<p>接下来，通过规则来指定允许该资源通过的请求次数，例如下面的代码定义了资源 <code>HelloWorld</code> 每秒最多只能通过 20 个请求。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">initFlowRules</span><span class=\"hljs-params\">()</span></span>{\n    List&lt;FlowRule&gt; rules = <span class=\"hljs-keyword\">new</span> ArrayList&lt;FlowRule&gt;();\n    FlowRule rule = <span class=\"hljs-keyword\">new</span> FlowRule();\n    rule.setResource(<span class=\"hljs-string\">\"HelloWorld\"</span>);\n    rule.setGrade(RuleConstant.FLOW_GRADE_QPS);\n    <span class=\"hljs-comment\">// Set limit QPS to 20.</span>\n    rule.setCount(<span class=\"hljs-number\">20</span>);\n    rules.add(rule);\n    FlowRuleManager.loadRules(rules);\n}\n</code></pre>\n<p>完成上面 3 步，Sentinel 就能够正常工作了。</p>\n<h2>检查效果</h2>\n<p>Demo 运行之后，我们可以在日志 <code>~/logs/csp/${appName}-metrics.log.xxx</code> 里看到下面的输出:</p>\n<pre><code>|--timestamp-|------date time----|--resource-|p |block|s |e|rt\n1529998904000|2018-06-26 15:41:44|hello world|20|0    |20|0|0\n1529998905000|2018-06-26 15:41:45|hello world|20|5579 |20|0|728\n1529998906000|2018-06-26 15:41:46|hello world|20|15698|20|0|0\n1529998907000|2018-06-26 15:41:47|hello world|20|19262|20|0|0\n1529998908000|2018-06-26 15:41:48|hello world|20|19502|20|0|0\n1529998909000|2018-06-26 15:41:49|hello world|20|18386|20|0|0\n</code></pre>\n<p>其中 <code>p</code> 代表通过的请求, <code>block</code> 代表被阻止的请求, <code>s</code> 代表成功通过 Sentinel 的请求个数, <code>e</code> 代表用户自定义的异常, <code>rt</code> 代表平均响应时长。</p>\n<p>可以看到，这个程序每秒稳定输出 &quot;hello world&quot; 20 次，和规则中预先设定的阈值是一样的。</p>\n<p>更详细的说明可以参考 <a href=\"./basic-api-resource-rule.md\">基本使用文档</a>；更多的例子可以参考 <a href=\"https://github.com/alibaba/Sentinel/tree/master/sentinel-demo\">demo 集合</a>。</p>\n<h2>启动 Sentinel 控制台</h2>\n<p>Sentinel 同时提供控制台，可以实时监控各个资源的运行情况，并且可以实时地修改规则。更多的信息请参考 <a href=\"./dashboard.md\">控制台文档</a>。</p>\n",
  "link": "/zh-cn/docs/quick-start.html",
  "meta": {}
}