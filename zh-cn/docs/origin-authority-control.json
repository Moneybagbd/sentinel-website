{
  "filename": "origin-authority-control.md",
  "__html": "<h1>来源访问控制（黑白名单）</h1>\n<p>很多时候，我们需要根据调用方来限制资源是否通过，这时候可以使用 Sentinel 的黑白名单控制的功能。黑白名单根据资源的请求来源（<code>origin</code>）限制资源是否通过，若配置白名单则只有请求来源位于白名单内时才可通过；若配置黑名单则请求来源位于黑名单时不通过，其余的请求通过。</p>\n<blockquote>\n<p>调用方信息通过 <code>ContextUtil.enter(resourceName, origin)</code> 方法中的 <code>origin</code> 参数传入。</p>\n</blockquote>\n<h2>规则配置</h2>\n<p>黑白名单规则（<code>AuthorityRule</code>）非常简单，主要有以下配置项：</p>\n<ul>\n<li><code>resource</code>：资源名，即限流规则的作用对象</li>\n<li><code>limitApp</code>：对应的黑名单/白名单，不同 origin 用 <code>,</code> 分隔，如 <code>appA,appB</code></li>\n<li><code>strategy</code>：限制模式，<code>AUTHORITY_WHITE</code> 为白名单模式，<code>AUTHORITY_BLACK</code> 为黑名单模式，默认为白名单模式</li>\n</ul>\n<h2>示例</h2>\n<p>比如我们希望控制对资源 <code>test</code> 的访问设置白名单，只有来源为 <code>appA</code> 和 <code>appB</code> 的请求才可通过，则可以配置如下白名单规则：</p>\n<pre><code class=\"language-java\">AuthorityRule rule = <span class=\"hljs-keyword\">new</span> AuthorityRule();\nrule.setResource(<span class=\"hljs-string\">\"test\"</span>);\nrule.setStrategy(RuleConstant.AUTHORITY_WHITE);\nrule.setLimitApp(<span class=\"hljs-string\">\"appA,appB\"</span>);\nAuthorityRuleManager.loadRules(Collections.singletonList(rule));\n</code></pre>\n<p>详细示例请参考 <a href=\"https://github.com/alibaba/Sentinel/blob/master/sentinel-demo/sentinel-demo-basic/src/main/java/com/alibaba/csp/sentinel/demo/authority/AuthorityDemo.java\">AuthorityDemo</a>.</p>\n",
  "link": "/zh-cn/docs/origin-authority-control.html",
  "meta": {}
}