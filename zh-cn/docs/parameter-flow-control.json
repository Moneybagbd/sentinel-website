{
  "filename": "parameter-flow-control.md",
  "__html": "<h1>热点参数限流</h1>\n<h2>Overview</h2>\n<p>何为热点？热点即经常访问的数据。很多时候我们希望统计某个热点数据中访问频次最高的 Top K 数据，并对其访问进行限制。比如：</p>\n<ul>\n<li>商品 ID 为参数，统计一段时间内最常购买的商品 ID 并进行限制</li>\n<li>用户 ID 为参数，针对一段时间内频繁访问的用户 ID 进行限制</li>\n</ul>\n<p>热点参数限流会统计传入参数中的热点参数，并根据配置的限流阈值与模式，对包含热点参数的资源调用进行限流。热点参数限流可以看做是一种特殊的流量控制，仅对包含热点参数的资源调用生效。</p>\n<p><img src=\"https://github.com/alibaba/Sentinel/wiki/image/sentinel-hot-param-overview-1.png\" alt=\"Sentinel Parameter Flow Control\"></p>\n<p>Sentinel 利用 LRU 策略统计最近最常访问的热点参数，结合令牌桶算法来进行参数级别的流控。</p>\n<h2>基本使用</h2>\n<p>要使用热点参数限流功能，需要引入以下依赖：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.csp<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>sentinel-parameter-flow-control<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>x.y.z<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<p>然后为对应的资源配置热点参数限流规则，并在 <code>entry</code> 的时候传入相应的参数，即可使热点参数限流生效。</p>\n<blockquote>\n<p>注：若自行扩展并注册了自己实现的 <code>SlotChainBuilder</code>，并希望使用热点参数限流功能，则可以在 chain 里面合适的地方插入 <code>ParamFlowSlot</code>。</p>\n</blockquote>\n<p>那么如何传入对应的参数以便 Sentinel 统计呢？我们可以通过 <code>SphU</code> 类里面几个 <code>entry</code> 重载方法来传入：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Entry <span class=\"hljs-title\">entry</span><span class=\"hljs-params\">(String name, EntryType type, <span class=\"hljs-keyword\">int</span> count, Object... args)</span> <span class=\"hljs-keyword\">throws</span> BlockException\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Entry <span class=\"hljs-title\">entry</span><span class=\"hljs-params\">(Method method, EntryType type, <span class=\"hljs-keyword\">int</span> count, Object... args)</span> <span class=\"hljs-keyword\">throws</span> BlockException\n</span></code></pre>\n<p>其中最后的一串 <code>args</code> 就是要传入的参数，有多个就按照次序依次传入。比如要传入两个参数 <code>paramA</code> 和 <code>paramB</code>，则可以：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// paramA in index 0, paramB in index 1.</span>\n<span class=\"hljs-comment\">// 若需要配置例外项或者使用集群维度流控，则传入的参数只支持基本类型。</span>\nSphU.entry(resourceName, EntryType.IN, <span class=\"hljs-number\">1</span>, paramA, paramB);\n</code></pre>\n<p><strong>注意</strong>：若 entry 的时候传入了热点参数，那么 exit 的时候也一定要带上对应的参数（<code>exit(count, args)</code>），否则可能会有统计错误。正确的示例：</p>\n<pre><code class=\"language-java\">Entry entry = <span class=\"hljs-keyword\">null</span>;\n<span class=\"hljs-keyword\">try</span> {\n    entry = SphU.entry(resourceName, EntryType.IN, <span class=\"hljs-number\">1</span>, paramA, paramB);\n    <span class=\"hljs-comment\">// Your logic here.</span>\n} <span class=\"hljs-keyword\">catch</span> (BlockException ex) {\n    <span class=\"hljs-comment\">// Handle request rejection.</span>\n} <span class=\"hljs-keyword\">finally</span> {\n    <span class=\"hljs-keyword\">if</span> (entry != <span class=\"hljs-keyword\">null</span>) {\n        entry.exit(<span class=\"hljs-number\">1</span>, paramA, paramB);\n    }\n}\n</code></pre>\n<p>对于 <code>@SentinelResource</code> 注解方式定义的资源，若注解作用的方法上有参数，Sentinel 会将它们作为参数传入 <code>SphU.entry(res, args)</code>。比如以下的方法里面 <code>uid</code> 和 <code>type</code> 会分别作为第一个和第二个参数传入 Sentinel API，从而可以用于热点规则判断：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@SentinelResource</span>(<span class=\"hljs-string\">\"myMethod\"</span>)\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Result <span class=\"hljs-title\">doSomething</span><span class=\"hljs-params\">(String uid, <span class=\"hljs-keyword\">int</span> type)</span> </span>{\n  <span class=\"hljs-comment\">// some logic here...</span>\n}\n</code></pre>\n<h2>热点参数规则</h2>\n<p>热点参数规则（<code>ParamFlowRule</code>）类似于流量控制规则（<code>FlowRule</code>）：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性</th>\n<th style=\"text-align:left\">说明</th>\n<th style=\"text-align:left\">默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">resource</td>\n<td style=\"text-align:left\">资源名，必填</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">count</td>\n<td style=\"text-align:left\">限流阈值，必填</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">grade</td>\n<td style=\"text-align:left\">限流模式</td>\n<td style=\"text-align:left\">QPS 模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">durationInSec</td>\n<td style=\"text-align:left\">统计窗口时间长度（单位为秒），1.6.0 版本开始支持</td>\n<td style=\"text-align:left\">1s</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">controlBehavior</td>\n<td style=\"text-align:left\">流控效果（支持快速失败和匀速排队模式），1.6.0 版本开始支持</td>\n<td style=\"text-align:left\">快速失败</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">maxQueueingTimeMs</td>\n<td style=\"text-align:left\">最大排队等待时长（仅在匀速排队模式生效），1.6.0 版本开始支持</td>\n<td style=\"text-align:left\">0ms</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">paramIdx</td>\n<td style=\"text-align:left\">热点参数的索引，必填，对应 <code>SphU.entry(xxx, args)</code> 中的参数索引位置</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">paramFlowItemList</td>\n<td style=\"text-align:left\">参数例外项，可以针对指定的参数值单独设置限流阈值，不受前面 <code>count</code> 阈值的限制。<strong>仅支持基本类型和字符串类型</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">clusterMode</td>\n<td style=\"text-align:left\">是否是集群参数流控规则</td>\n<td style=\"text-align:left\"><code>false</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">clusterConfig</td>\n<td style=\"text-align:left\">集群流控相关配置</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<p>我们可以通过 <code>ParamFlowRuleManager</code> 的 <code>loadRules</code> 方法更新热点参数规则，下面是一个示例：</p>\n<pre><code class=\"language-java\">ParamFlowRule rule = <span class=\"hljs-keyword\">new</span> ParamFlowRule(resourceName)\n    .setParamIdx(<span class=\"hljs-number\">0</span>)\n    .setCount(<span class=\"hljs-number\">5</span>);\n<span class=\"hljs-comment\">// 针对 int 类型的参数 PARAM_B，单独设置限流 QPS 阈值为 10，而不是全局的阈值 5.</span>\nParamFlowItem item = <span class=\"hljs-keyword\">new</span> ParamFlowItem().setObject(String.valueOf(PARAM_B))\n    .setClassType(<span class=\"hljs-keyword\">int</span>.class.getName())\n    .setCount(<span class=\"hljs-number\">10</span>);\nrule.setParamFlowItemList(Collections.singletonList(item));\n\nParamFlowRuleManager.loadRules(Collections.singletonList(rule));\n</code></pre>\n<h2>示例</h2>\n<p>示例可参见 <a href=\"https://github.com/alibaba/Sentinel/blob/master/sentinel-demo/sentinel-demo-parameter-flow-control/src/main/java/com/alibaba/csp/sentinel/demo/flow/param/ParamFlowQpsDemo.java\">sentinel-demo-parameter-flow-control</a>。</p>\n"
}