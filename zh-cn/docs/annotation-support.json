{
  "filename": "annotation-support.md",
  "__html": "<h1>注解埋点支持</h1>\n<p>Sentinel 提供了 <code>@SentinelResource</code> 注解用于定义资源，并提供了 AspectJ 的扩展用于自动定义资源、处理 <code>BlockException</code> 等。使用 <a href=\"https://github.com/alibaba/Sentinel/tree/master/sentinel-extension/sentinel-annotation-aspectj\">Sentinel Annotation AspectJ Extension</a> 的时候需要引入以下依赖：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.csp<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>sentinel-annotation-aspectj<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>x.y.z<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<h2>@SentinelResource 注解</h2>\n<blockquote>\n<p>注意：注解方式埋点不支持 private 方法。</p>\n</blockquote>\n<p><code>@SentinelResource</code> 用于定义资源，并提供可选的异常处理和 fallback 配置项。 <code>@SentinelResource</code> 注解包含以下属性：</p>\n<ul>\n<li><code>value</code>：资源名称，必需项（不能为空）</li>\n<li><code>entryType</code>：entry 类型，可选项（默认为 <code>EntryType.OUT</code>）</li>\n<li><code>blockHandler</code> / <code>blockHandlerClass</code>: <code>blockHandler</code> 对应处理 <code>BlockException</code> 的函数名称，可选项。blockHandler 函数访问范围需要是 <code>public</code>，返回类型需要与原方法相匹配，参数类型需要和原方法相匹配并且最后加一个额外的参数，类型为 <code>BlockException</code>。blockHandler 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 <code>blockHandlerClass</code> 为对应的类的 <code>Class</code> 对象，注意对应的函数必需为 static 函数，否则无法解析。</li>\n<li><code>fallback</code>：fallback 函数名称，可选项，用于在抛出异常的时候提供 fallback 处理逻辑。fallback 函数可以针对所有类型的异常（除了 <code>exceptionsToIgnore</code> 里面排除掉的异常类型）进行处理。fallback 函数签名和位置要求：\n<ul>\n<li>返回值类型必须与原函数返回值类型一致；</li>\n<li>方法参数列表需要和原函数一致，或者可以额外多一个 <code>Throwable</code> 类型的参数用于接收对应的异常。</li>\n<li>fallback 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 <code>fallbackClass</code> 为对应的类的 <code>Class</code> 对象，注意对应的函数必需为 static 函数，否则无法解析。</li>\n</ul>\n</li>\n<li><code>defaultFallback</code>（since 1.6.0）：默认的 fallback 函数名称，可选项，通常用于通用的 fallback 逻辑（即可以用于很多服务或方法）。默认 fallback 函数可以针对所以类型的异常（除了 <code>exceptionsToIgnore</code> 里面排除掉的异常类型）进行处理。若同时配置了 fallback 和 defaultFallback，则只有 fallback 会生效。defaultFallback 函数签名要求：\n<ul>\n<li>返回值类型必须与原函数返回值类型一致；</li>\n<li>方法参数列表需要为空，或者可以额外多一个 <code>Throwable</code> 类型的参数用于接收对应的异常。</li>\n<li>defaultFallback 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 <code>fallbackClass</code> 为对应的类的 <code>Class</code> 对象，注意对应的函数必需为 static 函数，否则无法解析。</li>\n</ul>\n</li>\n<li><code>exceptionsToIgnore</code>（since 1.6.0）：用于指定哪些异常被排除掉，不会计入异常统计中，也不会进入 fallback 逻辑中，而是会原样抛出。</li>\n</ul>\n<blockquote>\n<p>注：1.6.0 之前的版本 fallback 函数只针对降级异常（<code>DegradeException</code>）进行处理，<strong>不能针对业务异常进行处理</strong>。</p>\n</blockquote>\n<p>特别地，若 blockHandler 和 fallback 都进行了配置，则被限流降级而抛出 <code>BlockException</code> 时只会进入 <code>blockHandler</code> 处理逻辑。若未配置 <code>blockHandler</code>、<code>fallback</code> 和 <code>defaultFallback</code>，则被限流降级时会将 <code>BlockException</code> <strong>直接抛出</strong>。</p>\n<p>示例：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestService</span> </span>{\n\n    <span class=\"hljs-comment\">// 对应的 `handleException` 函数需要位于 `ExceptionUtil` 类中，并且必须为 static 函数.</span>\n    <span class=\"hljs-meta\">@SentinelResource</span>(value = <span class=\"hljs-string\">\"test\"</span>, blockHandler = <span class=\"hljs-string\">\"handleException\"</span>, blockHandlerClass = {ExceptionUtil.class})\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n        System.out.println(<span class=\"hljs-string\">\"Test\"</span>);\n    }\n\n    <span class=\"hljs-comment\">// 原函数</span>\n    <span class=\"hljs-meta\">@SentinelResource</span>(value = <span class=\"hljs-string\">\"hello\"</span>, blockHandler = <span class=\"hljs-string\">\"exceptionHandler\"</span>, fallback = <span class=\"hljs-string\">\"helloFallback\"</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">hello</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">long</span> s)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> String.format(<span class=\"hljs-string\">\"Hello at %d\"</span>, s);\n    }\n    \n    <span class=\"hljs-comment\">// Fallback 函数，函数签名与原函数一致或加一个 Throwable 类型的参数.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">helloFallback</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">long</span> s)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> String.format(<span class=\"hljs-string\">\"Halooooo %d\"</span>, s);\n    }\n\n    <span class=\"hljs-comment\">// Block 异常处理函数，参数最后多一个 BlockException，其余与原函数一致.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">exceptionHandler</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">long</span> s, BlockException ex)</span> </span>{\n        <span class=\"hljs-comment\">// Do some log here.</span>\n        ex.printStackTrace();\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Oops, error occurred at \"</span> + s;\n    }\n}\n</code></pre>\n<p>从 1.4.0 版本开始，注解方式定义资源支持自动统计业务异常，无需手动调用 <code>Tracer.trace(ex)</code> 来记录业务异常。Sentinel 1.4.0 以前的版本需要自行调用 <code>Tracer.trace(ex)</code> 来记录业务异常。</p>\n<h2>配置</h2>\n<h3>AspectJ</h3>\n<p>若您的应用直接使用了 AspectJ，那么您需要在 <code>aop.xml</code> 文件中引入对应的 Aspect：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aspects</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aspect</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"com.alibaba.csp.sentinel.annotation.aspectj.SentinelResourceAspect\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">aspects</span>&gt;</span>\n</code></pre>\n<h3>Spring AOP</h3>\n<p>若您的应用使用了 Spring AOP，您需要通过配置的方式将 <code>SentinelResourceAspect</code> 注册为一个 Spring Bean：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SentinelAspectConfiguration</span> </span>{\n\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> SentinelResourceAspect <span class=\"hljs-title\">sentinelResourceAspect</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> SentinelResourceAspect();\n    }\n}\n</code></pre>\n<p>我们提供了 Spring AOP 的示例，可以参见 <a href=\"https://github.com/alibaba/Sentinel/tree/master/sentinel-demo/sentinel-demo-annotation-spring-aop\">sentinel-demo-annotation-spring-aop</a>。er/sentinel-demo/sentinel-demo-annotation-spring-aop)。</p>\n"
}