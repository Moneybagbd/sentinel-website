{
  "filename": "circuit-breaking.md",
  "__html": "<h1>熔断降级</h1>\n<h2>概述</h2>\n<p>除了流量控制以外，对调用链路中不稳定的资源进行熔断降级也是保障高可用的重要措施之一。一个服务常常会调用别的模块，可能是另外的一个远程服务、数据库，或者第三方 API 等。例如，支付的时候，可能需要远程调用银联提供的 API；查询某个商品的价格，可能需要进行数据库查询。然而，这个被依赖服务的稳定性是不能保证的。如果依赖的服务出现了不稳定的情况，请求的响应时间变长，那么调用服务的方法的响应时间也会变长，线程会产生堆积，最终可能耗尽业务自身的线程池，服务本身也变得不可用。</p>\n<p><img src=\"https://user-images.githubusercontent.com/9434884/62410811-cd871680-b61d-11e9-9df7-3ee41c618644.png\" alt=\"chain\"></p>\n<p>现代微服务架构都是分布式的，由非常多的服务组成。不同服务之间相互调用，组成复杂的调用链路。以上的问题在链路调用中会产生放大的效果。复杂链路上的某一环不稳定，就可能会层层级联，最终导致整个链路都不可用。因此我们需要对不稳定的<strong>弱依赖服务调用</strong>进行熔断降级，暂时切断不稳定调用，避免局部不稳定因素导致整体的雪崩。熔断降级作为保护自身的手段，通常在客户端（调用端）进行配置。</p>\n<blockquote>\n<p><strong>注意</strong>：本文档针对 Sentinel 1.8.0 及以上版本。1.8.0 版本对熔断降级特性进行了全新的改进升级，请使用最新版本以更好地利用熔断降级的能力。</p>\n</blockquote>\n<h2>熔断策略</h2>\n<p>Sentinel 提供以下几种熔断策略：</p>\n<ul>\n<li>慢调用比例 (<code>SLOW_REQUEST_RATIO</code>)：选择以慢调用比例作为阈值，需要设置允许的慢调用 RT（即最大的响应时间），请求的响应时间大于该值则统计为慢调用。当单位统计时长（<code>statIntervalMs</code>）内请求数目大于设置的最小请求数目，并且慢调用的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，若大于设置的慢调用 RT 则会再次被熔断。</li>\n<li>异常比例 (<code>ERROR_RATIO</code>)：当单位统计时长（<code>statIntervalMs</code>）内请求数目大于设置的最小请求数目，并且异常的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。异常比率的阈值范围是 <code>[0.0, 1.0]</code>，代表 0% - 100%。</li>\n<li>异常数 (<code>ERROR_COUNT</code>)：当单位统计时长内的异常数目超过阈值之后会自动进行熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。</li>\n</ul>\n<p>注意异常降级<strong>仅针对业务异常</strong>，对 Sentinel 限流降级本身的异常（<code>BlockException</code>）不生效。为了统计异常比例或异常数，需要通过 <code>Tracer.trace(ex)</code> 记录业务异常。示例：</p>\n<pre><code class=\"language-java\">Entry entry = <span class=\"hljs-keyword\">null</span>;\n<span class=\"hljs-keyword\">try</span> {\n  entry = SphU.entry(key, EntryType.IN, key);\n\n  <span class=\"hljs-comment\">// Write your biz code here.</span>\n  <span class=\"hljs-comment\">// &lt;&lt;BIZ CODE&gt;&gt;</span>\n} <span class=\"hljs-keyword\">catch</span> (Throwable t) {\n  <span class=\"hljs-keyword\">if</span> (!BlockException.isBlockException(t)) {\n    Tracer.trace(t);\n  }\n} <span class=\"hljs-keyword\">finally</span> {\n  <span class=\"hljs-keyword\">if</span> (entry != <span class=\"hljs-keyword\">null</span>) {\n    entry.exit();\n  }\n}\n</code></pre>\n<p>开源整合模块，如 Sentinel Dubbo Adapter, Sentinel Web Servlet Filter 或 <code>@SentinelResource</code> 注解会自动统计业务异常，无需手动调用。</p>\n<h2>熔断降级规则说明</h2>\n<p>熔断降级规则（DegradeRule）包含下面几个重要的属性：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Field</th>\n<th style=\"text-align:left\">说明</th>\n<th style=\"text-align:left\">默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">resource</td>\n<td style=\"text-align:left\">资源名，即规则的作用对象</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">grade</td>\n<td style=\"text-align:left\">熔断策略，支持慢调用比例/异常比例/异常数策略</td>\n<td style=\"text-align:left\">慢调用比例</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">count</td>\n<td style=\"text-align:left\">慢调用比例模式下为慢调用临界 RT（超出该值计为慢调用）；异常比例/异常数模式下为对应的阈值</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">timeWindow</td>\n<td style=\"text-align:left\">熔断时长，单位为 s</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">minRequestAmount</td>\n<td style=\"text-align:left\">熔断触发的最小请求数，请求数小于该值时即使异常比率超出阈值也不会熔断（1.7.0 引入）</td>\n<td style=\"text-align:left\">5</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">statIntervalMs</td>\n<td style=\"text-align:left\">统计时长（单位为 ms），如 60*1000 代表分钟级（1.8.0 引入）</td>\n<td style=\"text-align:left\">1000 ms</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">slowRatioThreshold</td>\n<td style=\"text-align:left\">慢调用比例阈值，仅慢调用比例模式有效（1.8.0 引入）</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<h2>熔断器事件监听</h2>\n<p>Sentinel 支持注册自定义的事件监听器监听熔断器状态变换事件（state change event）。示例：</p>\n<pre><code class=\"language-java\">EventObserverRegistry.getInstance().addStateChangeObserver(<span class=\"hljs-string\">\"logging\"</span>,\n    (prevState, newState, rule, snapshotValue) -&gt; {\n        <span class=\"hljs-keyword\">if</span> (newState == State.OPEN) {\n            <span class=\"hljs-comment\">// 变换至 OPEN state 时会携带触发时的值</span>\n            System.err.println(String.format(<span class=\"hljs-string\">\"%s -&gt; OPEN at %d, snapshotValue=%.2f\"</span>, prevState.name(),\n                TimeUtil.currentTimeMillis(), snapshotValue));\n        } <span class=\"hljs-keyword\">else</span> {\n            System.err.println(String.format(<span class=\"hljs-string\">\"%s -&gt; %s at %d\"</span>, prevState.name(), newState.name(),\n                TimeUtil.currentTimeMillis()));\n        }\n    });\n</code></pre>\n<h2>示例</h2>\n<p>慢调用比例熔断示例：<a href=\"https://github.com/alibaba/Sentinel/blob/master/sentinel-demo/sentinel-demo-basic/src/main/java/com/alibaba/csp/sentinel/demo/degrade/SlowRatioCircuitBreakerDemo.java\">SlowRatioCircuitBreakerDemo</a></p>\n"
}