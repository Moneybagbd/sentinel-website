{
  "filename": "circuit-breaking.md",
  "__html": "<h1>熔断降级</h1>\n<h2>概述</h2>\n<p>熔断降级是指当资源处于不稳定的情况下，在接下来的时间窗口之内，对该资源的调用都自动熔断（默认行为是抛出 <code>DegradeException</code>）。我们通常用两种方式来衡量资源是否处于稳定的状态：</p>\n<ul>\n<li>\n<p>平均响应时间 (<code>DEGRADE_GRADE_RT</code>)：当资源的平均响应时间超过阈值（<code>DegradeRule</code> 中的 <code>count</code>，以 ms 为单位）之后，资源进入准降级状态。接下来如果持续进入 5 个请求，它们的 RT 都持续超过这个阈值，那么在接下的时间窗口（<code>DegradeRule</code> 中的 <code>timeWindow</code>，以 s 为单位）之内，对这个方法的调用都会自动地返回（抛出 <code>DegradeException</code>）。</p>\n<p>如 <a href=\"https://github.com/alibaba/Sentinel/blob/master/sentinel-demo/sentinel-demo-basic/src/main/java/com/alibaba/csp/sentinel/demo/degrade/RtDegradeDemo.java\">RT Degrade demo</a> 所示，一个资源每次需要 500 ms。那么观察这个例子的结果，发现每过 10 秒，就会恢复对该资源的调用，但是很快这个资源又会被降级（平均响应时间仍然不满足需求）。</p>\n</li>\n<li>\n<p>异常比例 (<code>DEGRADE_GRADE_EXCEPTION_RATIO</code>)：当资源的每秒异常总数占通过量的比值超过阈值（<code>DegradeRule</code> 中的 <code>count</code>）之后，资源进入降级状态，即在接下的时间窗口（<code>DegradeRule</code> 中的 <code>timeWindow</code>，以 s 为单位）之内，对这个方法的调用都会自动地返回。异常比率的阈值范围是 <code>[0.0, 1.0]</code>，代表 0% - 100%。</p>\n</li>\n<li>\n<p>异常数 (<code>DEGRADE_GRADE_EXCEPTION_COUNT</code>)：当资源近 1 分钟的异常数目超过阈值之后会进行熔断。</p>\n</li>\n</ul>\n<p>注意：为了统计异常比例或异常数，需要通过 <code>Tracer.trace(ex)</code> 记录业务异常。示例：</p>\n<pre><code class=\"language-java\">Entry entry = <span class=\"hljs-keyword\">null</span>;\n<span class=\"hljs-keyword\">try</span> {\n  entry = SphU.entry(key, EntryType.IN, key);\n\n  <span class=\"hljs-comment\">// Write your biz code here.</span>\n  <span class=\"hljs-comment\">// &lt;&lt;BIZ CODE&gt;&gt;</span>\n} <span class=\"hljs-keyword\">catch</span> (Throwable t) {\n  <span class=\"hljs-keyword\">if</span> (!BlockException.isBlockException(t)) {\n    Tracer.trace(t);\n  }\n} <span class=\"hljs-keyword\">finally</span> {\n  <span class=\"hljs-keyword\">if</span> (entry != <span class=\"hljs-keyword\">null</span>) {\n    entry.exit();\n  }\n}\n</code></pre>\n<p>开源整合模块，如 Sentinel Dubbo Adapter, Sentinel Web Servlet Filter 会自动统计业务异常，无需手动调用。</p>\n<h2>示例</h2>\n<p>运行 Demo，将可以看到：</p>\n<pre><code>1529399827825,total:0, pass:0, block:0\n1529399828825,total:4263, pass:100, block:4164  // 第一秒的平均RT都还比较小\n1529399829825,total:19179, pass:4, block:19176\n1529399830824,total:19806, pass:0, block:19806  // 开始被降级\n1529399831825,total:19198, pass:0, block:19198  \n1529399832824,total:19481, pass:0, block:19481\n1529399833826,total:19241, pass:0, block:19241\n1529399834826,total:17276, pass:0, block:17276\n1529399835826,total:18722, pass:0, block:18722\n1529399836826,total:19490, pass:0, block:19492\n1529399837828,total:19355, pass:0, block:19355\n1529399838827,total:11388, pass:0, block:11388\n1529399839829,total:14494, pass:104, block:14390 // 10秒之后恢复，然而又迅速地被降级\n1529399840854,total:18505, pass:0, block:18505\n1529399841854,total:19673, pass:0, block:19676\n</code></pre>\n",
  "link": "/zh-cn/docs/circuit-breaking.html",
  "meta": {}
}