{
  "filename": "metrics.md",
  "__html": "<h1>实时监控</h1>\n<p>Sentinel 提供对所有资源的实时监控。如果需要实时监控，客户端需引入以下依赖（以 Maven 为例）：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.csp<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>sentinel-transport-simple-http<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>x.y.z<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<p>引入上述依赖后，客户端便会主动连接 Sentinel 控制台。通过 <a href=\"./dashboard.md\">Sentinel 控制台</a> 即可查看客户端的实时监控。</p>\n<p>通常您并不需要关心以下 API，但是如果您对开发控制台感兴趣，以下为监控 API 的文档。</p>\n<h2>簇点监控</h2>\n<h3>获取簇点列表</h3>\n<p>相关 API: <code>GET /clusterNode</code></p>\n<p>当应用启动之后，可以运行下列命令，获得当前所有簇点（<code>ClusterNode</code>）的列表（JSON 格式）：</p>\n<pre><code class=\"language-bash\">curl http://localhost:8719/clusterNode\n</code></pre>\n<p>结果示例：</p>\n<pre><code class=\"language-javascript\">[\n {<span class=\"hljs-string\">\"avgRt\"</span>:<span class=\"hljs-number\">0.0</span>, <span class=\"hljs-comment\">//平均响应时间</span>\n <span class=\"hljs-string\">\"blockRequest\"</span>:<span class=\"hljs-number\">0</span>, <span class=\"hljs-comment\">//每分钟拦截的请求个数</span>\n <span class=\"hljs-string\">\"blockedQps\"</span>:<span class=\"hljs-number\">0.0</span>, <span class=\"hljs-comment\">//每秒拦截个数</span>\n <span class=\"hljs-string\">\"curThreadNum\"</span>:<span class=\"hljs-number\">0</span>, <span class=\"hljs-comment\">//并发个数</span>\n <span class=\"hljs-string\">\"passQps\"</span>:<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-comment\">// 每秒成功通过请求</span>\n <span class=\"hljs-string\">\"passReqQps\"</span>:<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-comment\">//每秒到来的请求</span>\n <span class=\"hljs-string\">\"resourceName\"</span>:<span class=\"hljs-string\">\"/registry/machine\"</span>, 资源名称\n <span class=\"hljs-string\">\"timeStamp\"</span>:<span class=\"hljs-number\">1529905824134</span>, <span class=\"hljs-comment\">//时间戳</span>\n <span class=\"hljs-string\">\"totalQps\"</span>:<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-comment\">// 每分钟请求数</span>\n <span class=\"hljs-string\">\"totalRequest\"</span>:<span class=\"hljs-number\">193</span>}, \n  ....\n]\n</code></pre>\n<h3>查询某个簇点的详细信息</h3>\n<p>可以用下面命令模糊查询该簇点的具体信息，其中 <code>id</code> 对应 resource name，支持模糊查询：</p>\n<pre><code class=\"language-bash\">curl http://localhost:8719/cnode?id=xxxx\n</code></pre>\n<p>结果示例：</p>\n<pre><code>idx id                                thread    pass      blocked   success    total    aRt   1m-pass   1m-block   1m-all   exeption   \n6   /app/aliswitch2/machines.json     0         0         0         0          0        0     0         0          0        0          \n7   /app/sentinel-admin/machines.json 0         1         0         1          1        6     0         0          0        0          \n8   /identity/machine.json            0         0         0         0          0        0     0         0          0        0          \n9   /registry/machine                 0         2         0         2          2        1     192       0          192      0          \n10  /app/views/machine.html           0         1         0         1          1        2     0         0          0        0   \n</code></pre>\n<h3>簇点调用者统计信息</h3>\n<p>可以用下列命令查询该簇点的调用者统计信息：</p>\n<pre><code class=\"language-bash\">curl http://localhost:8719/origin?id=xxxx\n</code></pre>\n<p>结果示例：</p>\n<pre><code>id: nodeA\nidx origin  threadNum passedQps blockedQps totalQps aRt   1m-passed 1m-blocked 1m-total \n1   caller1 0         0         0          0        0     0         0          0        \n2   caller2 0         0         0          0        0     0         0          0      \n</code></pre>\n<p>其中的 origin 由 <code>ContextUtil.enter(resourceName，origin)</code> 方法中的 <code>origin</code> 指定。</p>\n<h2>链路监控</h2>\n<p>我们可以通过命令　<code>curl http://localhost:8719/tree</code> 来查询链路入口的链路树形结构：</p>\n<pre><code>EntranceNode: machine-root(t:0 pq:1 bq:0 tq:1 rt:0 prq:1 1mp:0 1mb:0 1mt:0)\n-EntranceNode1: Entrance1(t:0 pq:1 bq:0 tq:1 rt:0 prq:1 1mp:0 1mb:0 1mt:0)\n--nodeA(t:0 pq:1 bq:0 tq:1 rt:0 prq:1 1mp:0 1mb:0 1mt:0)\n-EntranceNode2: Entrance1(t:0 pq:1 bq:0 tq:1 rt:0 prq:1 1mp:0 1mb:0 1mt:0)\n--nodeA(t:0 pq:1 bq:0 tq:1 rt:0 prq:1 1mp:0 1mb:0 1mt:0)\n\nt:threadNum  pq:passQps  bq:blockedQps  tq:totalQps  rt:averageRt  prq: passRequestQps 1mp:1m-passed 1mb:1m-blocked 1mt:1m-total\n</code></pre>\n<h2>历史资源数据</h2>\n<h3>资源的秒级日志</h3>\n<p>所有资源的秒级日志在 <code>${home}/logs/csp/${appName}-${pid}-metrics.log.${date}.xx</code>。例如，该日志的名字可能为 <code>app-3518-metrics.log.2018-06-22.1</code></p>\n<pre><code>1529573107000|2018-06-21 17:25:07|sayHello(java.lang.String,long)|10|3601|10|0|2\n</code></pre>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">index</th>\n<th style=\"text-align:center\">例子</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:center\"><code>1529573107000</code></td>\n<td style=\"text-align:left\">时间戳</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:center\"><code>2018-06-21 17:25:07</code></td>\n<td style=\"text-align:left\">日期</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:center\"><code>sayHello(java.lang.String,long)</code></td>\n<td style=\"text-align:left\">资源名称</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:center\"><code>10</code></td>\n<td style=\"text-align:left\"><strong>每秒通过的资源请求个数</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:center\"><code>3601</code></td>\n<td style=\"text-align:left\"><strong>每秒资源被拦截的个数</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:center\"><code>10</code></td>\n<td style=\"text-align:left\">每秒结束的资源个数，包括正常结束和异常结束的情况</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:center\"><code>0</code></td>\n<td style=\"text-align:left\">每秒资源的异常个数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:center\"><code>2</code></td>\n<td style=\"text-align:left\">资源平均响应时间</td>\n</tr>\n</tbody>\n</table>\n<h3>被拦截的秒级日志</h3>\n<p>同样的，每秒的拦截日志也会出现在 <code>&lt;用户目录&gt;/logs/csp/sentinel-block.log</code> 文件下。如果没有发生拦截，则该日志不会出现。</p>\n<pre><code>2014-06-20 16:35:10|1|sayHello(java.lang.String,long),FlowException,default,origin|61,0\n2014-06-20 16:35:11|1|sayHello(java.lang.String,long),FlowException,default,origin|1,0\n</code></pre>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">index</th>\n<th style=\"text-align:center\">例子</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:center\"><code>2014-06-20 16:35:10</code></td>\n<td style=\"text-align:left\">时间戳</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:center\"><code>1</code></td>\n<td style=\"text-align:left\">该秒发生的第一个资源</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:center\"><code>sayHello(java.lang.String,long)</code></td>\n<td style=\"text-align:left\">资源名称</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:center\"><code>XXXException</code></td>\n<td style=\"text-align:left\">拦截的原因, 通常 <code>FlowException</code> 代表是被限流规则拦截, <code>DegradeException</code> 则表示被降级，<code>SystemException</code> 则表示被系统保护拦截</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:center\"><code>default</code></td>\n<td style=\"text-align:left\">生效规则的调用应用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:center\"><code>origin</code></td>\n<td style=\"text-align:left\">被拦截资源的调用者。可以为空</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:center\"><code>61,0</code></td>\n<td style=\"text-align:left\">61 被拦截的数量，０则代表可以忽略</td>\n</tr>\n</tbody>\n</table>\n<h3>实时查询</h3>\n<p>相关 API: <code>GET /metric</code></p>\n<pre><code class=\"language-shell\">curl http://localhost:8719/metric?identity=XXX&amp;startTime=XXXX&amp;endTime=XXXX&amp;maxLines=XXXX\n</code></pre>\n<p>需指定以下 URL 参数：</p>\n<ul>\n<li><code>identity</code>：资源名称</li>\n<li><code>startTime</code>：开始时间（时间戳）</li>\n<li><code>endTime</code>：结束时间</li>\n<li><code>maxLines</code>：监控数据最大行数</li>\n</ul>\n<p>返回和 <a href=\"./logs.md\">资源的秒级日志</a> 格式一样的内容。例如：</p>\n<pre><code>1529998904000|2018-06-26 15:41:44|abc|100|0|0|0|0\n1529998905000|2018-06-26 15:41:45|abc|4|5579|104|0|728\n1529998906000|2018-06-26 15:41:46|abc|0|15698|0|0|0\n1529998907000|2018-06-26 15:41:47|abc|0|19262|0|0|0\n1529998908000|2018-06-26 15:41:48|abc|0|19502|0|0|0\n1529998909000|2018-06-26 15:41:49|abc|0|18386|0|0|0\n1529998910000|2018-06-26 15:41:50|abc|0|19189|0|0|0\n1529998911000|2018-06-26 15:41:51|abc|0|16543|0|0|0\n1529998912000|2018-06-26 15:41:52|abc|0|18471|0|0|0\n1529998913000|2018-06-26 15:41:53|abc|0|19405|0|0|0\n</code></pre>\n",
  "link": "/zh-cn/docs/metrics.html",
  "meta": {}
}