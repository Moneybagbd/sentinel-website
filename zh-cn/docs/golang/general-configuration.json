{
  "filename": "general-configuration.md",
  "__html": "<h1>通用配置</h1>\n<p>Sentinel 的运行需要一些配置启动项，比如启动监控日志，用户自定义日志目录，统计相关的一些设置。</p>\n<h2>配置项详解</h2>\n<p>Sentinel 支持的配置项的定义如下：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-comment\">// SentinelConfig represent the general configuration of Sentinel.</span>\n<span class=\"hljs-keyword\">type</span> SentinelConfig <span class=\"hljs-keyword\">struct</span> {\n\tApp <span class=\"hljs-keyword\">struct</span> {\n\t\t<span class=\"hljs-comment\">// Name represents the name of current running service.</span>\n\t\tName <span class=\"hljs-keyword\">string</span>\n\t\t<span class=\"hljs-comment\">// Type indicates the classification of the service (e.g. web service, API gateway).</span>\n\t\tType <span class=\"hljs-keyword\">int32</span>\n\t}\n\t<span class=\"hljs-comment\">// Log represents configuration items related to logging.</span>\n\tLog LogConfig\n\t<span class=\"hljs-comment\">// Stat represents configuration items related to statistics.</span>\n\tStat StatConfig\n\t<span class=\"hljs-comment\">// UseCacheTime indicates whether to cache time(ms)</span>\n\tUseCacheTime <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-string\">`yaml:\"useCacheTime\"`</span>\n}\n\n<span class=\"hljs-comment\">// LogConfig represent the configuration of logging in Sentinel.</span>\n<span class=\"hljs-keyword\">type</span> LogConfig <span class=\"hljs-keyword\">struct</span> {\n\t<span class=\"hljs-comment\">// Logger indicates that using logger to replace default logging.</span>\n\tLogger logging.Logger\n\t<span class=\"hljs-comment\">// Dir represents the log directory path.</span>\n\tDir <span class=\"hljs-keyword\">string</span>\n\t<span class=\"hljs-comment\">// UsePid indicates whether the filename ends with the process ID (PID).</span>\n\tUsePid <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-string\">`yaml:\"usePid\"`</span>\n\t<span class=\"hljs-comment\">// Metric represents the configuration items of the metric log.</span>\n\tMetric MetricLogConfig\n}\n\n<span class=\"hljs-comment\">// MetricLogConfig represents the configuration items of the metric log.</span>\n<span class=\"hljs-keyword\">type</span> MetricLogConfig <span class=\"hljs-keyword\">struct</span> {\n\tSingleFileMaxSize <span class=\"hljs-keyword\">uint64</span> <span class=\"hljs-string\">`yaml:\"singleFileMaxSize\"`</span>\n\tMaxFileCount      <span class=\"hljs-keyword\">uint32</span> <span class=\"hljs-string\">`yaml:\"maxFileCount\"`</span>\n\tFlushIntervalSec  <span class=\"hljs-keyword\">uint32</span> <span class=\"hljs-string\">`yaml:\"flushIntervalSec\"`</span>\n}\n\n<span class=\"hljs-comment\">// StatConfig represents the configuration items of statistics.</span>\n<span class=\"hljs-keyword\">type</span> StatConfig <span class=\"hljs-keyword\">struct</span> {\n\t<span class=\"hljs-comment\">// GlobalStatisticSampleCountTotal and GlobalStatisticIntervalMsTotal is the per resource's global default statistic sliding window config</span>\n\tGlobalStatisticSampleCountTotal <span class=\"hljs-keyword\">uint32</span> <span class=\"hljs-string\">`yaml:\"globalStatisticSampleCountTotal\"`</span>\n\tGlobalStatisticIntervalMsTotal  <span class=\"hljs-keyword\">uint32</span> <span class=\"hljs-string\">`yaml:\"globalStatisticIntervalMsTotal\"`</span>\n\n\t<span class=\"hljs-comment\">// MetricStatisticSampleCount and MetricStatisticIntervalMs is the per resource's default readonly metric statistic</span>\n\t<span class=\"hljs-comment\">// This default readonly metric statistic must be reusable based on global statistic.</span>\n\tMetricStatisticSampleCount <span class=\"hljs-keyword\">uint32</span> <span class=\"hljs-string\">`yaml:\"metricStatisticSampleCount\"`</span>\n\tMetricStatisticIntervalMs  <span class=\"hljs-keyword\">uint32</span> <span class=\"hljs-string\">`yaml:\"metricStatisticIntervalMs\"`</span>\n\n\tSystem SystemStatConfig <span class=\"hljs-string\">`yaml:\"system\"`</span>\n}\n\n<span class=\"hljs-comment\">// SystemStatConfig represents the configuration items of system statistics.</span>\n<span class=\"hljs-keyword\">type</span> SystemStatConfig <span class=\"hljs-keyword\">struct</span> {\n\t<span class=\"hljs-comment\">// CollectIntervalMs represents the collecting interval of the system metrics collector.</span>\n\tCollectIntervalMs <span class=\"hljs-keyword\">uint32</span> <span class=\"hljs-string\">`yaml:\"collectIntervalMs\"`</span>\n}\n</code></pre>\n<p>字段详细解释：</p>\n<table>\n<thead>\n<tr>\n<th>key</th>\n<th>含义</th>\n<th>默认值</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>version</code></td>\n<td>配置的版本</td>\n<td>v1</td>\n<td>无</td>\n</tr>\n<tr>\n<td><code>sentinel.app.name</code></td>\n<td>项目名称</td>\n<td><code>unknown_go_service</code></td>\n<td><strong>必需的配置项</strong>。若环境变量 <code>SENTINEL_APP_NAME</code> 和文件中均未配置，则标为 <code>unknown_go_service</code></td>\n</tr>\n<tr>\n<td><code>sentinel.app.type</code></td>\n<td>项目类型</td>\n<td>0</td>\n<td><strong>必需的配置项</strong>。若环境变量 <code>SENTINEL_APP_TYPE</code> 和文件中均未配置，则标为 <code>0</code></td>\n</tr>\n<tr>\n<td><code>sentinel.log.logger</code></td>\n<td>用户自定义Logger</td>\n<td>nil</td>\n<td>如果用户期望使用自定义的Logger去覆盖Sentinel默认的logger，需要指定这个对象，如果指定了，Sentinel就会使用这个对象打日志</td>\n</tr>\n<tr>\n<td><code>sentinel.log.dir</code></td>\n<td>日志路径</td>\n<td><code>${user.home}/logs/csp</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>sentinel.log.usePid</code></td>\n<td>监控日志文件名是否带上进程 PID</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td><code>sentinel.log.metric.maxFileCount</code></td>\n<td>监控日志最大文件数目</td>\n<td>8</td>\n<td></td>\n</tr>\n<tr>\n<td><code>sentinel.log.metric.singleFileMaxSize</code></td>\n<td>监控日志单个文件大小上限</td>\n<td>50 MB (<code>1024*1024*50</code>)</td>\n<td></td>\n</tr>\n<tr>\n<td><code>sentinel.log.metric.flushIntervalSec</code></td>\n<td>监控日志聚合和刷盘的时间频率</td>\n<td>1s</td>\n<td>若无特殊需要，请采用默认值。若设为 0 则关闭监控日志输出。</td>\n</tr>\n<tr>\n<td><code>sentinel.stat.system.globalStatisticSampleCountTotal</code></td>\n<td>Resource的全局滑动窗口的统计格子数</td>\n<td>20</td>\n<td>若无特殊需要，请采用默认值。</td>\n</tr>\n<tr>\n<td><code>sentinel.stat.system.globalStatisticIntervalMsTotal</code></td>\n<td>Resource的全局滑动窗口的间隔时间(ms)</td>\n<td>10000</td>\n<td>若无特殊需要，请采用默认值。</td>\n</tr>\n<tr>\n<td><code>sentinel.stat.system.metricStatisticSampleCount</code></td>\n<td>Resource的默认监控日志统计的滑动窗口的统计格子数</td>\n<td>2</td>\n<td>若无特殊需要，请采用默认值。</td>\n</tr>\n<tr>\n<td><code>sentinel.stat.system.metricStatisticIntervalMs</code></td>\n<td>Resource的默认监控日志统计的滑动窗口的间隔时间</td>\n<td>1000</td>\n<td>若无特殊需要，请采用默认值。</td>\n</tr>\n<tr>\n<td><code>sentinel.stat.system.collectIntervalMs</code></td>\n<td>系统指标收集的间隔时间</td>\n<td>1000</td>\n<td>若无特殊需要，请采用默认值。若设为 0 则关闭系统指标收集。</td>\n</tr>\n<tr>\n<td><code>sentinel.useCachedTime</code></td>\n<td>是否通过异步协程缓存时间 (ms)</td>\n<td>true</td>\n<td>若无特殊需要，请采用默认值。</td>\n</tr>\n</tbody>\n</table>\n<p>如果不使用自适应限流模块(core/system)，可以通过设置<code>sentinel.stat.system.collectIntervalMs</code> 为0，表示关闭系统指标收集。\n如果不使用监控日志，可以通过设置<code>sentinel.log.metric.flushIntervalSec</code>为0，表示关闭监控日志文件异步输出。</p>\n<h2>Sentinel支持的配置方式</h2>\n<p>Sentinel支持三种方式来初始化运行环境：yaml文件、手动配置config.Entity以及环境变量。优先级是：环境变量大于手动配置。</p>\n<h3>yaml配置文件</h3>\n<p>Sentinel的api pkg提供了两个函数通过yaml文件初始化Sentinel运行环境：</p>\n<ol>\n<li><code>func InitDefault()</code> 函数初始化，Sentinel 则会尝试从 <code>SENTINEL_CONFIG_FILE_PATH</code> 环境变量读取 path 并读取对应的文件。若未指定则默认从项目目录下的 <code>sentinel.yml</code> 文件读取配置；若均不存在，Sentinel 会通过环境变量读取基础的配置（如项目名称），其它配置项采用默认值。</li>\n<li><code>func InitWithConfigFile(configPath string)</code> 使用用户指定目录的yaml文件，同时会通过环境变量读取基础的配置，然后初始化 Sentinel</li>\n</ol>\n<p>如果yaml文件不存在，就是通过默认的全局配置项初始化Sentinel。默认的全局配置项定义可refer：<a href=\"https://github.com/alibaba/sentinel-golang/blob/master/core/config/entity.go\">https://github.com/alibaba/sentinel-golang/blob/master/core/config/entity.go#NewDefaultConfig</a></p>\n<p>YAML 配置文件示例：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">\"v1\"</span>\n<span class=\"hljs-attr\">sentinel:</span>\n<span class=\"hljs-attr\">  app:</span>\n<span class=\"hljs-attr\">    name:</span> <span class=\"hljs-string\">sentinel-go-demo</span>\n<span class=\"hljs-attr\">    type:</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">  log:</span>\n<span class=\"hljs-attr\">    dir:</span> <span class=\"hljs-string\">\"~/logs/csp\"</span>\n<span class=\"hljs-attr\">    pid:</span> <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-attr\">    metric:</span>\n<span class=\"hljs-attr\">      maxFileCount:</span> <span class=\"hljs-number\">14</span>\n<span class=\"hljs-attr\">      flushIntervalSec:</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-attr\">  stat:</span>\n<span class=\"hljs-attr\">    system:</span>\n<span class=\"hljs-attr\">      collectIntervalMs:</span> <span class=\"hljs-number\">1000</span>\n</code></pre>\n<h3>通过配置对象初始化Sentinel运行环境</h3>\n<p><code>InitWithConfig(confEntity *config.Entity)</code> 函数初始化，用户需要自己制定配置项 <code>config.Entity</code>, Sentinle 会使用用户输入的配置项初始化。如果存在环境变量，那么环境变量优先级最高。</p>\n<p>注意：环境变量配置优先级最高。若同时存在，则环境变量的配置会覆盖 YAML 文件的配置。</p>\n<h2>环境变量配置项</h2>\n<p>环境变量的配置优先级永远是最高的，Sentinel支持5个环境变量：</p>\n<table>\n<thead>\n<tr>\n<th>key</th>\n<th>对应的 yaml 配置项</th>\n<th>含义</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>SENTINEL_CONFIG_FILE_PATH</code></td>\n<td>-</td>\n<td>yaml 配置文件路径</td>\n<td>若未指定则默认从项目目录下的 <code>sentinel.yml</code> 文件读取配置</td>\n</tr>\n<tr>\n<td><code>SENTINEL_APP_NAME</code></td>\n<td><a href=\"http://sentinel.app.name\">sentinel.app.name</a></td>\n<td>项目名称</td>\n<td><strong>必需的配置项</strong>。若环境变量和文件中均未配置，则标为 <code>unknown_go_service</code></td>\n</tr>\n<tr>\n<td><code>SENTINEL_APP_TYPE</code></td>\n<td>sentinel.app.type</td>\n<td>项目类型</td>\n<td><strong>必需的配置项</strong>。若环境变量和文件中均未配置，则标为 1</td>\n</tr>\n<tr>\n<td><code>SENTINEL_LOG_DIR</code></td>\n<td>-</td>\n<td>日志路径</td>\n<td>默认路径为 <code>~/logs/csp</code></td>\n</tr>\n<tr>\n<td><code>SENTINEL_LOG_USE_PID</code></td>\n<td>-</td>\n<td>日志文件是否带 pid</td>\n<td>默认为 false</td>\n</tr>\n</tbody>\n</table>\n<p>以上配置项中，应用名称（<a href=\"http://sentinel.app.name\">sentinel.app.name</a>）为必需的配置项。</p>\n"
}