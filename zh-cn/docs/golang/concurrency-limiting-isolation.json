{
  "filename": "concurrency-limiting-isolation.md",
  "__html": "<h1>并发隔离控制</h1>\n<p>并发隔离控制是指基于资源访问的并发协程数来控制对资源的访问，这里的思路和信号量隔离很类似，主要是控制对资源访问的最大并发数，避免因为资源的异常导致协程耗尽。</p>\n<p>参考：<a href=\"https://github.com/alibaba/sentinel-golang/tree/master/core/isolation\">https://github.com/alibaba/sentinel-golang/tree/master/core/isolation</a></p>\n<h2>隔离规则</h2>\n<p>并发隔离规则的<a href=\"https://github.com/alibaba/sentinel-golang/blob/master/core/isolation/rule.go\">定义</a>如下：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-comment\">// Rule describes the concurrency num control, that is similar to semaphore</span>\n<span class=\"hljs-keyword\">type</span> Rule <span class=\"hljs-keyword\">struct</span> {\n\t<span class=\"hljs-comment\">// ID represents the unique ID of the rule (optional).</span>\n\tID         <span class=\"hljs-keyword\">string</span>     <span class=\"hljs-string\">`json:\"id,omitempty\"`</span>\n\tResource   <span class=\"hljs-keyword\">string</span>     <span class=\"hljs-string\">`json:\"resource\"`</span>\n\tMetricType MetricType <span class=\"hljs-string\">`json:\"metricType\"`</span>\n\tThreshold  <span class=\"hljs-keyword\">uint32</span>     <span class=\"hljs-string\">`json:\"threshold\"`</span>\n}\n</code></pre>\n<p>Sentinel 支持 <code>Concurrency</code>，也就是并发数作为统计指标。如果资源当前的并发数高于阈值 (Threshold)，那么资源将不可访问。</p>\n<p>隔离规则配置示例（具体数值不作为线上配置参考，要根据业务系统情况而定）：</p>\n<pre><code class=\"language-go\">r1 := &amp;Rule{\n\tResource:   <span class=\"hljs-string\">\"abc\"</span>,\n\tMetricType: Concurrency,\n\tThreshold:  <span class=\"hljs-number\">100</span>,\n}\n</code></pre>\n<h2>最佳实践场景</h2>\n<p>在分布式系统架构中，我们一般推荐在客户端（调用端）做一层软隔离（并发隔离控制），达到对资源访问的并发控制的目的。</p>\n<h2>示例</h2>\n<p>参考：<a href=\"https://github.com/alibaba/sentinel-golang/blob/master/example/isolation/concurrency_limitation_example.go\">concurrency_limiting_example</a></p>\n"
}