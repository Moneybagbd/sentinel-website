{
  "filename": "hotspot-param-flow-control.md",
  "__html": "<h2>Overview</h2>\n<p>何为热点？热点即经常访问的数据。很多时候我们希望统计某个热点数据中访问频次最高的 Top K 数据，并对其访问进行限制。比如：</p>\n<ul>\n<li>商品 ID 为参数，统计一段时间内最常购买的商品 ID 并进行限制</li>\n<li>用户 ID 为参数，针对一段时间内频繁访问的用户 ID 进行限制</li>\n</ul>\n<p>热点参数限流会统计传入参数中的热点参数，并根据配置的限流阈值与模式，对包含热点参数的资源调用进行限流。热点参数限流可以看做是一种特殊的流量控制，仅对包含热点参数的资源调用生效。</p>\n<p><img src=\"https://github.com/alibaba/Sentinel/wiki/image/sentinel-hot-param-overview-1.png\" alt=\"\"></p>\n<p>Sentinel 利用 LRU 策略统计最近最常访问的热点参数，结合令牌桶算法来进行参数级别的流控。</p>\n<p>Sentinel 通过埋点的形式，在每次 <code>Entry(opts)</code> 的时候携带上需要流控的参数。具体可以参考：<a href=\"https://github.com/alibaba/sentinel-golang/blob/c37b472e97de7691a566e078dae3f1a9ed73536d/api/api.go#L75\">api/api.go/#func WithArgs(args ...interface{}) EntryOption 函数</a></p>\n<p>WithArgs 函数携带的是一个参数列表。Sentinel 的热点参数流控的每个规则会对参数列表中某一位置的参数生效(根据热点参数流控规则中的参数列表 <code>ParamIndex</code> 属性来指定生效参数位置)。Sentinel 会为每个规则都创建独立的统计结构，统计结构会缓存对应参数列表的 ParamIndex 的所有值，根据值的统计做流控。</p>\n<p>这里举个例子：假设每次 Entry 的时候携带上的参数的类型列表是：<code>[string, int]</code>。现在有一个规则 R1 在 <code>ParamIndex</code> 是 0 的位置生效，规则基于并发数去做控制，限制最高并发是 100。 那么 Entry 的时候携带上的参数列表 <code>[&quot;sentinel&quot;, any number]</code>，第一个参数出现 &quot;sentinel&quot; 的请求，并发量不超过 100。</p>\n<h2>热点参数流控规则</h2>\n<p>Rule 的定义参考：<a href=\"https://github.com/alibaba/sentinel-golang/blob/master/core/hotspot/rule.go\">hotspot.Rule</a></p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">type</span> Rule <span class=\"hljs-keyword\">struct</span> {\n\t<span class=\"hljs-comment\">// ID is the unique id</span>\n\tID <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:\"id,omitempty\"`</span>\n\t<span class=\"hljs-comment\">// Resource is the resource name</span>\n\tResource <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:\"resource\"`</span>\n\t<span class=\"hljs-comment\">// MetricType indicates the metric type for checking logic.</span>\n\t<span class=\"hljs-comment\">// For Concurrency metric, hotspot module will check the each hot parameter's concurrency,</span>\n\t<span class=\"hljs-comment\">//\t\tif concurrency exceeds the Threshold, reject the traffic directly.</span>\n\t<span class=\"hljs-comment\">// For QPS metric, hotspot module will check the each hot parameter's QPS,</span>\n\t<span class=\"hljs-comment\">//\t\tthe ControlBehavior decides the behavior of traffic shaping controller</span>\n\tMetricType MetricType <span class=\"hljs-string\">`json:\"metricType\"`</span>\n\t<span class=\"hljs-comment\">// ControlBehavior indicates the traffic shaping behaviour.</span>\n\t<span class=\"hljs-comment\">// ControlBehavior only takes effect when MetricType is QPS</span>\n\tControlBehavior ControlBehavior <span class=\"hljs-string\">`json:\"controlBehavior\"`</span>\n\t<span class=\"hljs-comment\">// ParamIndex is the index in context arguments slice.</span>\n\t<span class=\"hljs-comment\">// if ParamIndex is great than or equals to zero, ParamIndex means the &lt;ParamIndex&gt;-th parameter</span>\n\t<span class=\"hljs-comment\">// if ParamIndex is the negative, ParamIndex means the reversed &lt;ParamIndex&gt;-th parameter</span>\n\tParamIndex <span class=\"hljs-keyword\">int</span> <span class=\"hljs-string\">`json:\"paramIndex\"`</span>\n\t<span class=\"hljs-comment\">// Threshold is the threshold to trigger rejection</span>\n\tThreshold <span class=\"hljs-keyword\">int64</span> <span class=\"hljs-string\">`json:\"threshold\"`</span>\n\t<span class=\"hljs-comment\">// MaxQueueingTimeMs only takes effect when MetricType is QPS and ControlBehavior is Throttling</span>\n\tMaxQueueingTimeMs <span class=\"hljs-keyword\">int64</span> <span class=\"hljs-string\">`json:\"maxQueueingTimeMs\"`</span>\n\t<span class=\"hljs-comment\">// BurstCount is the silent count</span>\n\t<span class=\"hljs-comment\">// BurstCount only takes effect when MetricType is QPS and ControlBehavior is Reject</span>\n\tBurstCount <span class=\"hljs-keyword\">int64</span> <span class=\"hljs-string\">`json:\"burstCount\"`</span>\n\t<span class=\"hljs-comment\">// DurationInSec is the time interval in statistic</span>\n\t<span class=\"hljs-comment\">// DurationInSec only takes effect when MetricType is QPS</span>\n\tDurationInSec <span class=\"hljs-keyword\">int64</span> <span class=\"hljs-string\">`json:\"durationInSec\"`</span>\n\t<span class=\"hljs-comment\">// ParamsMaxCapacity is the max capacity of cache statistic</span>\n\tParamsMaxCapacity <span class=\"hljs-keyword\">int64</span> <span class=\"hljs-string\">`json:\"paramsMaxCapacity\"`</span>\n\t<span class=\"hljs-comment\">// SpecificItems indicates the special threshold for specific value</span>\n\tSpecificItems <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">interface</span>{}]<span class=\"hljs-keyword\">int64</span> <span class=\"hljs-string\">`json:\"specificItems\"`</span>\n}\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>是否必填项</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Resource</td>\n<td>资源名</td>\n<td>必填</td>\n<td>无</td>\n</tr>\n<tr>\n<td>MetricType</td>\n<td>流控指标类型 (<code>MetricType</code>)，支持两种：请求数和并发数</td>\n<td>必填</td>\n<td>无</td>\n</tr>\n<tr>\n<td>ControlBehavior</td>\n<td>流控的效果 (<code>ControlBehavior</code>)，仅在请求数模式下有效。支持两种：快速失败和匀速+排队模式</td>\n<td>必填</td>\n<td>无</td>\n</tr>\n<tr>\n<td>ParamIndex</td>\n<td>热点参数的索引，对应 <code>WithArgs(args ...interface{})</code> 中的参数索引位置，从 0 开始</td>\n<td>必填</td>\n<td>无</td>\n</tr>\n<tr>\n<td>Threshold</td>\n<td>限流阈值（针对每个热点参数）</td>\n<td>必填</td>\n<td>无</td>\n</tr>\n<tr>\n<td>MaxQueueingTimeMs</td>\n<td>最大排队等待时长（仅在匀速排队模式 + QPS 下生效）</td>\n<td>选填</td>\n<td>无</td>\n</tr>\n<tr>\n<td>BurstCount</td>\n<td>静默值(仅在快速失败模式 + QPS 下生效)</td>\n<td>选填</td>\n<td>无</td>\n</tr>\n<tr>\n<td>DurationInSec</td>\n<td>统计结构填充新的 token 的时间间隔 (仅在请求数(QPS)流控模式下生效)</td>\n<td>选填</td>\n<td>无</td>\n</tr>\n<tr>\n<td>ParamsMaxCapacity</td>\n<td>统计结构的容量最大值（Top N）</td>\n<td>选填</td>\n<td>20000</td>\n</tr>\n<tr>\n<td>SpecificItems</td>\n<td>特定参数的特殊阈值配置，可以针对指定的参数值单独设置限流阈值，不受前面 Threshold 阈值的限制。</td>\n<td>选填</td>\n<td>无</td>\n</tr>\n</tbody>\n</table>\n<h2>热点参数流控策略</h2>\n<p>热点参数流控的控制策略由<code>MetricType</code>和<code>ControlBehavior</code>两个字段决定。</p>\n<p><code>MetricType</code>表示热点参数流控的统计metric类型，Sentinel支持两种：请求数(QPS)和并发数(Concurrency)。</p>\n<ul>\n<li>Concurrency：基于并发数控制热点参数，这种设置下会使用统计结构中当前参数的并发数来执行流控策略。<code>MetricType</code>是Concurrency时候，字段<code>ControlBehavior</code>不会生效，如果当前参数的并发数超过了阈值，那么就拒绝该请求，如果没超过阈值，就通过检查。</li>\n<li>QPS：基于请求数控制热点参数，基于token bucket记录的数据和字段<code>ControlBehavior</code>的策略执行流控。</li>\n</ul>\n<p><code>ControlBehavior</code>表示热点参数流量控制器的控制行为，Sentinel支持两种控制行为：Reject(拒绝)和Throttling(匀速排队)，需要强调的是，<code>ControlBehavior</code>仅仅在<code>MetricType</code>是QPS时候才生效。</p>\n<ul>\n<li>Reject：表示如果当前统计周期(<code>DurationInSec</code>)内，统计结构内参数的token已经用完了，就直接拒绝，如果没用完就获取token，通过检查。</li>\n<li>Throttling：表示匀速排队的统计策略。</li>\n</ul>\n<h2>热点参数流控统计结构</h2>\n<p>Sentinel 在加载规则时候会将热点参数流控规则转换成热点参数流量控制器，每个流量控制器都有自己独立的统计结构。Sentinel的热点参数流量控制器的独立统计结构是基于token bucket的思想实现的。统计结构缓存了每个埋点参数的三个metric：上次填Token时间、当前统计时间间隔内剩余Token、当前参数的并发数。</p>\n<p>流量控制器的统计结构基于LRU的策略，每个规则默认缓存20000个参数的统计数据。</p>\n<h2>常见场景规则设置</h2>\n<h3>基于并发数控制热点参数：</h3>\n<pre><code class=\"language-go\">{\n\tResource:          <span class=\"hljs-string\">\"some-test\"</span>,\n\tMetricType:        hotspot.Concurrency,\n\tParamIndex:        <span class=\"hljs-number\">0</span>,\n\tThreshold:         <span class=\"hljs-number\">100</span>,\n\tDurationInSec:     <span class=\"hljs-number\">1</span>,\n},\n</code></pre>\n<p>上面的配置表示：针对资源，some-test，在参数列表中的第一个参数(index是0)进行流控，每次更新token的周期是1秒，并发数阈值是100。对于Concurrency来说，<code>ControlBehavior</code>,<code>MaxQueueingTimeMs</code>,<code>BurstCount</code>这三个字段都是无效字段，均不用设置。</p>\n<h3>基于请求数控制热点参数</h3>\n<pre><code class=\"language-go\">{\n\tResource:          <span class=\"hljs-string\">\"some-test\"</span>,\n\tMetricType:        hotspot.QPS,\n        ControlBehavior:   hotspot.Reject\n\tParamIndex:        <span class=\"hljs-number\">1</span>,\n\tThreshold:         <span class=\"hljs-number\">100</span>,\n        BurstCount:        <span class=\"hljs-number\">5</span>,\n\tDurationInSec:     <span class=\"hljs-number\">1</span>,\n},\n</code></pre>\n<p>上面的配置表示：针对资源，some-test，在参数列表中的第二个参数(index是1)进行流控，每次更新token的周期是1秒，统计时间间隔内请求数阈值是100。对于QPS来说，<code>MaxQueueingTimeMs</code>字段是无效字段，不用设置。</p>\n<p>这里配置的流控策略是，超过阈值，直接拒绝流量。</p>\n<h2>Usage Example</h2>\n<p>可参考 example 代码：<a href=\"https://github.com/alibaba/sentinel-golang/tree/master/example/hotspot_param_flow\">https://github.com/alibaba/sentinel-golang/tree/master/example/hotspot_param_flow</a></p>\n"
}