{
  "filename": "dynamic-data-source-extension-framework-design.md",
  "__html": "<h1>Data-Source Extension Design</h1>\n<p>The overall workflow is the same as the Java version. Please see the architecture below:</p>\n<p><img src=\"https://user-images.githubusercontent.com/9434884/45406233-645e8380-b698-11e8-8199-0c917403238f.png\" alt=\"\"></p>\n<p>This article focuses on the design of updating the property on the application side.</p>\n<h2>Abstract Model</h2>\n<h3>Data-Source Property</h3>\n<pre><code class=\"language-go\"><span class=\"hljs-comment\">// PropertyConverter func is to converter source message bytes to the specific property.</span>\n<span class=\"hljs-comment\">// the first  return value: is the real property;</span>\n<span class=\"hljs-comment\">// the second return value: return nil if succeed to convert src, if not return the detailed error when convert src.</span>\n<span class=\"hljs-comment\">// if src is nil or len(src)==0, the return value is (nil,nil)</span>\n<span class=\"hljs-keyword\">type</span> PropertyConverter <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(src []<span class=\"hljs-keyword\">byte</span>)</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">interface</span>{}, error)</span>\n\n// <span class=\"hljs-title\">PropertyUpdater</span> <span class=\"hljs-title\">func</span> <span class=\"hljs-title\">is</span> <span class=\"hljs-title\">to</span> <span class=\"hljs-title\">update</span> <span class=\"hljs-title\">the</span> <span class=\"hljs-title\">specific</span> <span class=\"hljs-title\">properties</span> <span class=\"hljs-title\">to</span> <span class=\"hljs-title\">downstream</span>.\n// <span class=\"hljs-title\">return</span> <span class=\"hljs-title\">nil</span> <span class=\"hljs-title\">if</span> <span class=\"hljs-title\">succeed</span> <span class=\"hljs-title\">to</span> <span class=\"hljs-title\">update</span>, <span class=\"hljs-title\">if</span> <span class=\"hljs-title\">not</span>, <span class=\"hljs-title\">return</span> <span class=\"hljs-title\">the</span> <span class=\"hljs-title\">error</span>.\n<span class=\"hljs-title\">type</span> <span class=\"hljs-title\">PropertyUpdater</span> <span class=\"hljs-title\">func</span><span class=\"hljs-params\">(data <span class=\"hljs-keyword\">interface</span>{})</span> <span class=\"hljs-title\">error</span>\n\n// <span class=\"hljs-title\">abstract</span> <span class=\"hljs-title\">interface</span> <span class=\"hljs-title\">to</span> <span class=\"hljs-title\">describe</span> <span class=\"hljs-title\">the</span> <span class=\"hljs-title\">property</span> <span class=\"hljs-title\">handler</span>\n<span class=\"hljs-title\">type</span> <span class=\"hljs-title\">PropertyHandler</span> <span class=\"hljs-title\">interface</span></span> {\n\t<span class=\"hljs-comment\">// check whether the current src is consistent with last update property</span>\n\tisPropertyConsistent(src <span class=\"hljs-keyword\">interface</span>{}) <span class=\"hljs-keyword\">bool</span>\n\t<span class=\"hljs-comment\">// handle the current property</span>\n\tHandle(src []<span class=\"hljs-keyword\">byte</span>) error\n}\n\n<span class=\"hljs-comment\">// DefaultPropertyHandler encapsulate the Converter and updater of property.</span>\n<span class=\"hljs-comment\">// One DefaultPropertyHandler instance is to handle one property type.</span>\n<span class=\"hljs-comment\">// DefaultPropertyHandler should check whether current property is consistent with last update property</span>\n<span class=\"hljs-comment\">// converter convert the message to the specific property</span>\n<span class=\"hljs-comment\">// updater update the specific property to downstream.</span>\n<span class=\"hljs-keyword\">type</span> DefaultPropertyHandler <span class=\"hljs-keyword\">struct</span> {\n\tlastUpdateProperty <span class=\"hljs-keyword\">interface</span>{}\n\n\tconverter PropertyConverter\n\tupdater   PropertyUpdater\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(h *DefaultPropertyHandler)</span> <span class=\"hljs-title\">isPropertyConsistent</span><span class=\"hljs-params\">(src <span class=\"hljs-keyword\">interface</span>{})</span> <span class=\"hljs-title\">bool</span></span> {\n\tisConsistent := reflect.DeepEqual(src, h.lastUpdateProperty)\n\t<span class=\"hljs-keyword\">if</span> isConsistent {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n\t} <span class=\"hljs-keyword\">else</span> {\n\t\th.lastUpdateProperty = src\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n\t}\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(h *DefaultPropertyHandler)</span> <span class=\"hljs-title\">Handle</span><span class=\"hljs-params\">(src []<span class=\"hljs-keyword\">byte</span>)</span> <span class=\"hljs-title\">error</span></span> {\n\t<span class=\"hljs-keyword\">defer</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> {\n\t\t<span class=\"hljs-keyword\">if</span> err := <span class=\"hljs-built_in\">recover</span>(); err != <span class=\"hljs-literal\">nil</span> &amp;&amp; logger != <span class=\"hljs-literal\">nil</span> {\n\t\t\tlogger.Panicf(<span class=\"hljs-string\">\"Unexpected panic: %+v\"</span>, errors.Errorf(<span class=\"hljs-string\">\"%+v\"</span>, err))\n\t\t}\n\t}()\n\t<span class=\"hljs-comment\">// converter to target property</span>\n\trealProperty, err := h.converter(src)\n\t<span class=\"hljs-keyword\">if</span> err!=<span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-keyword\">return</span> err\n\t}\n\tisConsistent := h.isPropertyConsistent(realProperty)\n\t<span class=\"hljs-keyword\">if</span> isConsistent {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\n\t}\n\t<span class=\"hljs-keyword\">return</span> h.updater(realProperty)\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">NewDefaultPropertyHandler</span><span class=\"hljs-params\">(converter PropertyConverter, updater PropertyUpdater)</span> *<span class=\"hljs-title\">DefaultPropertyHandler</span></span> {\n\t<span class=\"hljs-keyword\">return</span> &amp;DefaultPropertyHandler{\n\t\tconverter: converter,\n\t\tupdater:   updater,\n\t}\n}\n</code></pre>\n<p>PropertyHandler is an abstract interface to describe the processing logic for the dynamic property, and DefaultPropertyHandler is the default implementation.</p>\n<p>The process of a dynamic property is divided into two parts:</p>\n<ol>\n<li>Converter: Read source bytes of property and convert to target type property;</li>\n<li>Updater: Update the newer property to the downstream.</li>\n</ol>\n<p>That is to say, each PropertyHandler must have a Converter function and a Updater function.</p>\n<p>In order to avoid the useless update operation, DefaultPropertyHandler instance will cache the last updated property and check the consistency between current property value and last property value.</p>\n<h3>Datasource</h3>\n<p>Datasource is the generic interface to describe the datasource instance. Each DataSource instance listen in one property.</p>\n<pre><code class=\"language-go\"><span class=\"hljs-comment\">// The generic interface to describe the datasource</span>\n<span class=\"hljs-comment\">// Each DataSource instance listen in one property type.</span>\n<span class=\"hljs-keyword\">type</span> DataSource <span class=\"hljs-keyword\">interface</span> {\n\t<span class=\"hljs-comment\">// Add specified property handler in current datasource</span>\n\tAddPropertyHandler(h PropertyHandler)\n\t<span class=\"hljs-comment\">// Remove specified property handler in current datasource</span>\n\tRemovePropertyHandler(h PropertyHandler)\n\t<span class=\"hljs-comment\">// Read original data from the data source.</span>\n\t<span class=\"hljs-comment\">// return source bytes if succeed to read, if not, return error when reading</span>\n\tReadSource() ([]<span class=\"hljs-keyword\">byte</span>, error)\n\t<span class=\"hljs-comment\">// Initialize the datasource and load initial rules</span>\n\t<span class=\"hljs-comment\">// start listener to listen on dynamic source</span>\n\t<span class=\"hljs-comment\">// panic if initialize failed;</span>\n\t<span class=\"hljs-comment\">// once initialized, listener should recover all panic and error.</span>\n\tInitialize()\n\t<span class=\"hljs-comment\">// Close the data source.</span>\n\tio.Closer\n}\n</code></pre>\n<p>Each DataSource instance listen on one property. There might be one or multi PropertyHandler in one Datasource to handle the same property.</p>\n<p>the workflow of updating is as below:\n<img src=\"https://img-blog.csdnimg.cn/20200302001548471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA4NTMyNjE=,size_16,color_FFFFFF,t_70\" alt=\"\"></p>\n<ol>\n<li>Read dynamic datasource message;</li>\n<li>iterate DataSourceHandler List to handle dynamic datasource message;</li>\n<li>Call Convert function of DataSourceHandler to convert raw message to specific property;</li>\n<li>Call Update function of DataSourceHandler to update specific property to downstream component.</li>\n</ol>\n"
}