{
  "filename": "basic-implementation.md",
  "__html": "<h1>How Sentinel Works</h1>\n<p>When an entry is created, a series of slots are created as well. These slots have different responsibilities, some for tracing, some for collecting and calculating run-time information, some for flow control, some for circuit breaking, and so on. You can customize your own logic by adding slots based on the following fundamental slots.</p>\n<p><img src=\"https://user-images.githubusercontent.com/9434884/69955207-1e5d3c00-1538-11ea-9ab2-297efff32809.png\" alt=\"image\"></p>\n<h2>NodeSelectorSlot: Trace nodes and form a calling tree in the memory</h2>\n<pre><code class=\"language-java\">ContextUtil.enter(<span class=\"hljs-string\">\"entrance1\"</span>, <span class=\"hljs-string\">\"appA\"</span>);\nEntry nodeA = SphU.entry(<span class=\"hljs-string\">\"nodeA\"</span>);\n<span class=\"hljs-keyword\">if</span> (nodeA != <span class=\"hljs-keyword\">null</span>) {\n    nodeA.exit();\n}\nContextUtil.exit();\n</code></pre>\n<p>The code above will generate the following structure in memory:</p>\n<pre><code> \t     machine-root\n                 /     \n                /\n         EntranceNode1\n              /\n             /   \n      DefaultNode(nodeA)\n</code></pre>\n<p>Each <code>DefaultNode</code> is identified by both the context and resource name. In other words, one resource id may have multiple <code>DefaultNode</code> distinguished by the entry names declared in <code>ContextUtil.enter(contextName)</code>.</p>\n<pre><code class=\"language-java\">  ContextUtil.enter(<span class=\"hljs-string\">\"entrance1\"</span>, <span class=\"hljs-string\">\"appA\"</span>);\n  Entry nodeA = SphU.entry(<span class=\"hljs-string\">\"nodeA\"</span>);\n  <span class=\"hljs-keyword\">if</span> (nodeA != <span class=\"hljs-keyword\">null</span>) {\n    nodeA.exit();\n  }\n  ContextUtil.exit();\n  ContextUtil.enter(<span class=\"hljs-string\">\"entrance2\"</span>, <span class=\"hljs-string\">\"appA\"</span>);\n  nodeA = SphU.entry(<span class=\"hljs-string\">\"nodeA\"</span>);\n  <span class=\"hljs-keyword\">if</span> (nodeA != <span class=\"hljs-keyword\">null</span>) {\n    nodeA.exit();\n  }\n  ContextUtil.exit();\n\n</code></pre>\n<p>The code above will generate the following structure in memory:</p>\n<pre><code>                   machine-root\n                   /         \\\n                  /           \\\n          EntranceNode1   EntranceNode2\n                /               \\\n               /                 \\\n       DefaultNode(nodeA)   DefaultNode(nodeA)\n</code></pre>\n<p>The calling trace can be displayed by calling <code>curl http://localhost:8719/tree?type=root</code>.</p>\n<pre><code>EntranceNode: machine-root(t:0 pq:1 bq:0 tq:1 rt:0 prq:1 1mp:0 1mb:0 1mt:0)\n-EntranceNode1: Entrance1(t:0 pq:1 bq:0 tq:1 rt:0 prq:1 1mp:0 1mb:0 1mt:0)\n--nodeA(t:0 pq:1 bq:0 tq:1 rt:0 prq:1 1mp:0 1mb:0 1mt:0)\n-EntranceNode2: Entrance1(t:0 pq:1 bq:0 tq:1 rt:0 prq:1 1mp:0 1mb:0 1mt:0)\n--nodeA(t:0 pq:1 bq:0 tq:1 rt:0 prq:1 1mp:0 1mb:0 1mt:0)\n\nt:threadNum  pq:passQps  bq:blockedQps  tq:totalQps  rt:averageRt  prq: passRequestQps 1mp:1m-passed 1mb:1m-blocked 1mt:1m-total\n</code></pre>\n<h2>ClusterNodeBuilderSlot: Build cluster node named by resource</h2>\n<p>This slot maintains resource runtime statistics (response time, QPS, thread, count, exception), and a list of origin callers' statistics. The origin caller's name is marked by <code>origin</code> in <code>ContextUtil.enter(contextName, origin)</code>.</p>\n<p>The information can be displayed by calling the following HTTP API:  <code>http://localhost:8719/origin?id=xxxx</code></p>\n<pre><code>id: nodeA\nidx origin  threadNum passedQps blockedQps totalQps aRt   1m-passed 1m-blocked 1m-total \n1   caller1 0         0         0          0        0     0         0          0        \n2   caller2 0         0         0          0        0     0         0          0        \n</code></pre>\n<h2>StatisticSlot: Collect runtime statistics</h2>\n<ul>\n<li>ClusterNode (ResourceNode): Total statistics of a resource;</li>\n<li>Origin node: Statistics of a ClusterNode from different callers;</li>\n<li>DefaultNode: The entry of the node, marked by context entry name and resource ID;</li>\n<li>The total sum statistics of incoming entrances.</li>\n</ul>\n<p>The StatisticNode is backed by sliding window data structure (LeapArray):</p>\n<p><img src=\"https://user-images.githubusercontent.com/9434884/51955215-0af7c500-247e-11e9-8895-9fc0e4c10c8c.png\" alt=\"sliding-window\"></p>\n"
}