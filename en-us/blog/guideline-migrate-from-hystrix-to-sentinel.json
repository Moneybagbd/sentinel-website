{
  "filename": "guideline-migrate-from-hystrix-to-sentinel.md",
  "__html": "<h1>Guideline: Migration from Hystrix to Sentinel</h1>\n<p>This article will help you migrate from Hystrix to Sentinel and help you get up to speed on using Sentinel.</p>\n<table>\n<thead>\n<tr>\n<th>Feature in Hystrix</th>\n<th>Migration Solution</th>\n<th>Feature in Sentinel</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Thread Pool Isolation / Semaphore Isolation</td>\n<td>Sentinel does not support thread pool isolation; In Sentinel, flow control in <a href=\"https://github.com/alibaba/Sentinel/wiki/Flow-Control#concurrent-thread-count\">thread count mode</a> represents semaphore isolation. If you are using semaphore isolation, you can simply add flow rules for target resource.</td>\n<td><a href=\"https://github.com/alibaba/Sentinel/wiki/Flow-Control#concurrent-thread-count\">Thread Count Flow Control</a></td>\n</tr>\n<tr>\n<td>Circuit Breaker</td>\n<td>Sentinel supports circuit breaking by average response time, exception ratio and exception count. If you want to use circuit breaking in Sentinel, you cam simply configure degrade rules for target resource.</td>\n<td><a href=\"https://github.com/alibaba/Sentinel/wiki/Circuit-Breaking\">Circuit breaking with various strategy</a></td>\n</tr>\n<tr>\n<td>Command Definition</td>\n<td>You can define your resource entry (similar to command key) via <code>SphU</code> API in Sentinel. <a href=\"https://github.com/alibaba/Sentinel/wiki/How-to-Use#define-resource\">Resource definition</a> and <a href=\"https://github.com/alibaba/Sentinel/wiki/How-to-Use#configure-rules\">rule configuration</a> are separate.</td>\n<td><a href=\"https://github.com/alibaba/Sentinel/wiki/How-to-Use#define-resource\">Resource Entry Definition</a></td>\n</tr>\n<tr>\n<td>Command Configuration</td>\n<td>Rules can be hardcoded through the <code>xxxRuleManager</code> API in Sentinel, and multiple dynamic rule data sources are also supported.</td>\n<td><a href=\"https://github.com/alibaba/Sentinel/wiki/How-to-Use#configure-rules\">Rule Configuration</a></td>\n</tr>\n<tr>\n<td>HystrixCommand annotation</td>\n<td>Sentinel also provides <a href=\"https://github.com/alibaba/Sentinel/blob/master/sentinel-extension/sentinel-annotation-aspectj/README.md\">annotation support</a> (<code>SentinelResource</code>), which is easy to use.</td>\n<td><a href=\"https://github.com/alibaba/Sentinel/blob/master/sentinel-extension/sentinel-annotation-aspectj/README.md\">SentinelResource annotation</a></td>\n</tr>\n<tr>\n<td>Spring Cloud Netflix</td>\n<td>Sentinel provides out-of-box integration modules for Servlet, Dubbo, Spring Cloud, and gRPC. If you were using Spring Cloud Netflix previously, it's east for you to migrate to Spring Cloud Alibaba.</td>\n<td><a href=\"https://github.com/spring-cloud-incubator/spring-cloud-alibaba\">Spring Cloud Alibaba</a></td>\n</tr>\n</tbody>\n</table>\n<h2>HystrixCommand</h2>\n<p>The execution model of Hystrix is designed with command pattern that encapsulates the business logic and fallback logic into a single command object (<code>HystrixCommand</code> / <code>HystrixObservableCommand</code>). A simple example:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SomeCommand</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">HystrixCommand</span>&lt;<span class=\"hljs-title\">String</span>&gt; </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">SomeCommand</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">super</span>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class=\"hljs-string\">\"SomeGroup\"</span>))\n            <span class=\"hljs-comment\">// command key</span>\n            .andCommandKey(HystrixCommandKey.Factory.asKey(<span class=\"hljs-string\">\"SomeCommand\"</span>))\n            <span class=\"hljs-comment\">// command configuration</span>\n            .andCommandPropertiesDefaults(HystrixCommandProperties.Setter()\n                .withFallbackEnabled(<span class=\"hljs-keyword\">true</span>)\n            ));\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> String <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-comment\">// business logic</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Hello World!\"</span>;\n    }\n}\n\n<span class=\"hljs-comment\">// The execution model of Hystrix</span>\n<span class=\"hljs-comment\">// sync mode:</span>\nString s = <span class=\"hljs-keyword\">new</span> SomeCommand().execute();\n<span class=\"hljs-comment\">// async mode (managed by Hystrix):</span>\nObservable&lt;String&gt; s = <span class=\"hljs-keyword\">new</span> SomeCommand().observe();\n</code></pre>\n<p>Sentinel does not specify an execution model, nor does it care how the code is executed. In Sentinel, what you should do is just to wrap your code with Sentinel API to define resources:</p>\n<pre><code class=\"language-java\">Entry entry = <span class=\"hljs-keyword\">null</span>;\n<span class=\"hljs-keyword\">try</span> {\n    entry = SphU.entry(<span class=\"hljs-string\">\"resourceName\"</span>);\n    <span class=\"hljs-comment\">// your business logic here</span>\n    <span class=\"hljs-keyword\">return</span> doSomeThing();\n} <span class=\"hljs-keyword\">catch</span> (BlockException ex) {\n    <span class=\"hljs-comment\">// handle rejected</span>\n} <span class=\"hljs-keyword\">finally</span> {\n    <span class=\"hljs-keyword\">if</span> (entry != <span class=\"hljs-keyword\">null</span>) {\n        entry.exit();\n    }\n}\n</code></pre>\n<p>In Hystrix, you usually have to configure rules when the command is defined. In Sentinel, resource definitions and rule configurations are separate. Users first define resources for the corresponding business logic through the Sentinel API, and then configure the rules when needed. For details, please refer to <a href=\"https://github.com/alibaba/Sentinel/wiki/How-to-Use\">the document</a>.</p>\n<h2>Thread Pool Isolation</h2>\n<p>The advantage of thread pool isolation is that the isolation is relatively thorough, and it can be processed for the thread pool of a resource without affecting other resources. But the drawback is that the number of threads is large, and the overhead of thread context switching is very large, especially for low latency invocations. Sentinel does not provide such a heavy isolation strategy, but provides a relatively lightweight isolation strategy - thread count flow control as semaphore isolation.</p>\n<h2>Semaphore Isolation</h2>\n<p>Hystrix's semaphore isolation is configured at Command definition, such asï¼š</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CommandUsingSemaphoreIsolation</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">HystrixCommand</span>&lt;<span class=\"hljs-title\">String</span>&gt; </span>{\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> id;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">CommandUsingSemaphoreIsolation</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> id)</span> </span>{\n        <span class=\"hljs-keyword\">super</span>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class=\"hljs-string\">\"SomeGroup\"</span>))\n            .andCommandPropertiesDefaults(HystrixCommandProperties.Setter()\n                .withExecutionIsolationStrategy(ExecutionIsolationStrategy.SEMAPHORE)\n                .withExecutionIsolationSemaphoreMaxConcurrentRequests(<span class=\"hljs-number\">8</span>)));\n        <span class=\"hljs-keyword\">this</span>.id = id;\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> String <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"result_\"</span> + id;\n    }\n}\n</code></pre>\n<p>In Sentinel, semaphore isolation is provided as a mode of flow control (thread count mode), so you only need to configure the flow rule for the resource:</p>\n<pre><code class=\"language-java\">FlowRule rule = <span class=\"hljs-keyword\">new</span> FlowRule(<span class=\"hljs-string\">\"doSomething\"</span>) <span class=\"hljs-comment\">// resource name</span>\n    .setGrade(RuleConstant.FLOW_GRADE_THREAD) <span class=\"hljs-comment\">// thread count mode</span>\n    .setCount(<span class=\"hljs-number\">8</span>); <span class=\"hljs-comment\">// max concurrency</span>\nFlowRuleManager.loadRules(Collections.singletonList(rule)); <span class=\"hljs-comment\">// load the rules</span>\n</code></pre>\n<p>If you are using Sentinel dashboard, you can also easily configure the rules in dashboard.</p>\n<h2>Circuit Breaking</h2>\n<p>Hystrix circuit breaker supports error percentage mode. Related properties:</p>\n<ul>\n<li><code>circuitBreaker.errorThresholdPercentage</code>: the threshold</li>\n<li><code>circuitBreaker.sleepWindowInMilliseconds</code>: the sleep window when circuit breaker is open</li>\n</ul>\n<p>For example:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FooServiceCommand</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">HystrixCommand</span>&lt;<span class=\"hljs-title\">String</span>&gt; </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-title\">FooServiceCommand</span><span class=\"hljs-params\">(HystrixCommandGroupKey group)</span> </span>{\n        <span class=\"hljs-keyword\">super</span>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class=\"hljs-string\">\"OtherGroup\"</span>))\n            <span class=\"hljs-comment\">// command key</span>\n            .andCommandKey(HystrixCommandKey.Factory.asKey(<span class=\"hljs-string\">\"fooService\"</span>))\n            .andCommandPropertiesDefaults(HystrixCommandProperties.Setter()\n                .withExecutionTimeoutInMilliseconds(<span class=\"hljs-number\">500</span>)\n                .withCircuitBreakerRequestVolumeThreshold(<span class=\"hljs-number\">5</span>)\n                .withCircuitBreakerErrorThresholdPercentage(<span class=\"hljs-number\">50</span>)\n                .withCircuitBreakerSleepWindowInMilliseconds(<span class=\"hljs-number\">10000</span>)\n            ));\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> String <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"some_result\"</span>;\n    }\n}\n</code></pre>\n<p>In Sentinel, you only need to configure circuit breaking rules for resources that want to be automatically degraded. For example, the rules corresponding to the Hystrix example above:</p>\n<pre><code class=\"language-java\">DegradeRule rule = <span class=\"hljs-keyword\">new</span> DegradeRule(<span class=\"hljs-string\">\"fooService\"</span>)\n    .setGrade(RuleConstant.DEGRADE_GRADE_EXCEPTION_RATIO) <span class=\"hljs-comment\">// exception ratio mode</span>\n    .setCount(<span class=\"hljs-number\">0.5</span>) <span class=\"hljs-comment\">// ratio threshold (0.5 -&gt; 50%)</span>\n    .setTimeWindow(<span class=\"hljs-number\">10</span>); <span class=\"hljs-comment\">// sleep window (10s)</span>\n<span class=\"hljs-comment\">// load the rules</span>\nDegradeRuleManager.loadRules(Collections.singletonList(rule));\n</code></pre>\n<p>If you are using <a href=\"https://github.com/alibaba/Sentinel/wiki/Dashboard\">Sentinel dashboard</a>, you can also easily configure the circuit breaking rules in dashboard.</p>\n<p>In addition to the exception ratio mode, Sentinel also supports automatic circuit breaking based on average response time and minute exceptions.</p>\n<h2>Annotation Support</h2>\n<p>Hystrix provides annotation support to encapsulate command and configure it. Here is an example of Hystrix annotation:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// original method</span>\n<span class=\"hljs-meta\">@HystrixCommand</span>(fallbackMethod = <span class=\"hljs-string\">\"fallbackForGetUser\"</span>)\n<span class=\"hljs-function\">User <span class=\"hljs-title\">getUserById</span><span class=\"hljs-params\">(String id)</span> </span>{\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> RuntimeException(<span class=\"hljs-string\">\"getUserById command failed\"</span>);\n}\n\n<span class=\"hljs-comment\">// fallback method</span>\n<span class=\"hljs-function\">User <span class=\"hljs-title\">fallbackForGetUser</span><span class=\"hljs-params\">(String id)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> User(<span class=\"hljs-string\">\"admin\"</span>);\n}\n</code></pre>\n<p>Hystrix rule configuration is bundled with command execution. We can configure rules for command in the <code>commandProperties</code> property of the <code>@HystrixCommand annotation</code>, such as:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@HystrixCommand</span>(commandProperties = {\n        <span class=\"hljs-meta\">@HystrixProperty</span>(name = <span class=\"hljs-string\">\"circuitBreaker.errorThresholdPercentage\"</span>, value = <span class=\"hljs-string\">\"50\"</span>)\n    })\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title\">getUserById</span><span class=\"hljs-params\">(String id)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> userResource.getUserById(id);\n}\n</code></pre>\n<p>Using Sentinel annotations is similar to Hystrix, as follows:</p>\n<ul>\n<li>Add the annotation support dependency: <code>sentinel-annotation-aspectj</code> and register the aspect as a Spring bean (if you are using <a href=\"https://github.com/spring-cloud-incubator/spring-cloud-alibaba\">Spring Cloud Alibaba</a> then the bean will be injected automatically);</li>\n<li>Add the <code>@SentinelResource</code> annotation to the method that needs flow control and circuit breaking. You can set <code>fallback</code> or <code>blockHandler</code> functions in the annotation;</li>\n<li>Configure rules</li>\n</ul>\n<p>For the details, you can refer to <a href=\"https://github.com/alibaba/Sentinel/blob/master/sentinel-extension/sentinel-annotation-aspectj/README.md\">the annotation support document</a>. An example for Sentinel annotation:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// original method</span>\n<span class=\"hljs-meta\">@SentinelResource</span>(fallback = <span class=\"hljs-string\">\"fallbackForGetUser\"</span>)\n<span class=\"hljs-function\">User <span class=\"hljs-title\">getUserById</span><span class=\"hljs-params\">(String id)</span> </span>{\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> RuntimeException(<span class=\"hljs-string\">\"getUserById command failed\"</span>);\n}\n\n<span class=\"hljs-comment\">// fallback method (only invoked when the original resource triggers circuit breaking); If we need to handle for flow control / system protection, we can set `blockHandler` method</span>\n<span class=\"hljs-function\">User <span class=\"hljs-title\">fallbackForGetUser</span><span class=\"hljs-params\">(String id)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> User(<span class=\"hljs-string\">\"admin\"</span>);\n}\n</code></pre>\n<p>Then configure the rules:</p>\n<ul>\n<li>via API (e.g. <code>DegradeRuleManager.loadRules(rules)</code> method)</li>\n</ul>\n<pre><code class=\"language-java\">DegradeRule rule = <span class=\"hljs-keyword\">new</span> DegradeRule(<span class=\"hljs-string\">\"getUserById\"</span>)\n    .setGrade(RuleConstant.DEGRADE_GRADE_EXCEPTION_RATIO) <span class=\"hljs-comment\">// exception ratio mode</span>\n    .setCount(<span class=\"hljs-number\">0.5</span>) <span class=\"hljs-comment\">// ratio threshold (0.5 -&gt; 50%)</span>\n    .setTimeWindow(<span class=\"hljs-number\">10</span>); <span class=\"hljs-comment\">// sleep window (10s)</span>\n<span class=\"hljs-comment\">// load the rules</span>\nDegradeRuleManager.loadRules(Collections.singletonList(rule));\n</code></pre>\n<ul>\n<li>via <a href=\"https://github.com/alibaba/Sentinel/wiki/Dashboard\">Sentinel dashboard</a></li>\n</ul>\n<h2>Integrations</h2>\n<p>Sentinel has integration modules with Web Servlet, Dubbo, Spring Cloud and gRPC. Users can quickly use Sentinel by introducing adapter dependencies and do simple configuration. If you have been using Spring Cloud Netflix before, you may consider migrating to the <a href=\"https://github.com/spring-cloud-incubator/spring-cloud-alibaba\">Spring Cloud Alibaba</a>.</p>\n<h2>Dynamic Configuration</h2>\n<p>Sentinel provides dynamic rule data-source support for dynamic rule management. The <code>ReadableDataSource</code> and <code>WritableDataSource</code> interfaces provided by Sentinel are easy to use.</p>\n<p>The Sentinel dynamic rule data-source provides extension module to integrate with popular configuration centers and remote storage. Currently, it supports many dynamic rule sources such as Nacos, ZooKeeper, Apollo, and Redis, which can cover many production scenarios.</p>\n"
}